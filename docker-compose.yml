services:

  # ──────────────────────────────────────────────────────────────────────────────
  # 2) Your existing web service
  # ──────────────────────────────────────────────────────────────────────────────
  web:
    build:
      context: .
      dockerfile: Dockerfile
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/code:Z
      - ./.vscode:/code/.vscode
    env_file:
      - .env
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONDONTWRITEBYTECODE=1
      # Tell your app (or any sidecar scripts) where to reach MCP:
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  # ──────────────────────────────────────────────────────────────────────────────
  # 3) The rest of your stack (nginx, db, redis, pgadmin…)
  # ──────────────────────────────────────────────────────────────────────────────
  nginx:
    image: nginx:latest
    ports:
      - "80"
    volumes:
      - ./nginx/conf.d:/etc/nginx/conf.d:Z,ro
      - nginx_cache:/var/cache/nginx
    depends_on:
      - web
    user: root
    command: >
      /bin/bash -c "
        mkdir -p /var/cache/nginx &&
        chown -R nginx:nginx /var/cache/nginx &&
        nginx -g 'daemon off;'"

  db:
    image: postgres:13
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:6
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  pgadmin:
    image: dpage/pgadmin4
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD}
    ports:
      - "80"
    depends_on:
      - db

volumes:
  pgdata:
  nginx_cache:
